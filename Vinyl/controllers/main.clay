import cocoa.*;
import cocoa.appkit.*;
import Vinyl.appdelegate.*;
import Vinyl.library.*;
import Vinyl.library.datasources.*;
import Vinyl.qtplayer.*;
import Vinyl.controllers.itunesimport.*;

alias PlayControlsBackTag = 0;
alias PlayControlsPlayTag = 1;
alias PlayControlsForwardTag = 2;

alias PlaylistControlsAddTag = 0;
alias PlaylistControlsRandomTag = 1;
alias PlaylistControlsRepeatTag = 2;

overload selector(static #"performPlayControl:") = Void, NSSegmentedControl;
overload selector(static #"performVolumeUpdate:") = Void, Id;
overload selector(static #"performSearch:") = Void, Id;
overload selector(static #"performPlaylistControl:") = Void, NSSegmentedControl;
overload selector(static #"performSelectPlaylist:") = Void, NSTableView;
overload selector(static #"performSelectTrack:") = Void, NSTableView;
overload selector(static #"performImportItunesLibrary:") = Void, Id;
overload selector(static #"performDoubleClickPlaylist:") = Void, NSTableView;
overload selector(static #"performDoubleClickTrack:") = Void, NSTableView;
overload selector(static #"performImportItunesLibrary:") = Void, Id;
overload selector(static #"performOpenLibraryWindow:") = Void, Id;
overload selector(static #"player") = Player;
overload selector(static #"library") = Pointer[Library];
overload selector(static #"_itunesSheetDidEnd:returnCode:contextInfo:")
    = Void, NSWindow, NSInteger, RawPointer;

setStatusField(self, ...contents) {
    self^.statusField.setStringValue(printString(...contents));
}

performImportItunesLibrary(self: MainController, itunesLibrary: NSString) {
    if (nil?(itunesLibrary)) {
        // XXX error reporting
        NSLog(NSString(#"itunes library not found"));
    } else {
        var importController = ItunesImportController.alloc().init();

        if (nil?(importController))
            // XXX
            NSLog(NSString(#"couldn't create controller"));
        else
            importController.importItunesLibrary_modalForWindow_modalDelegate_didEndSelector_contextInfo(
                itunesLibrary,
                self^.mainWindow,
                self,
                selectorHandle(#"_itunesSheetDidEnd:returnCode:contextInfo:"),
                RawPointer(importController)
            );
    }
}

playTrackNumber(self: MainController, trackNumber: NSInteger) {
    self^.player.playLibrary_view_trackNumber(
        &self^.library,
        self^.playlistDataSource.libraryView()^,
        SizeT(trackNumber)
    );
}

record MainController = newClass(#VinylMainController, NSObject,
    InstanceVars(
        ...IBOutlets(
            mainWindow: NSWindow,
            appDelegate: AppDelegate,
            // content
            libraryView: NSOutlineView,
            playlistView: NSTableView,
            // toolbar
            playControls: NSSegmentedControl,
            volumeControl: NSControl,
            playInfoView: NSView,
            searchField: NSTextField,
            // status bar controls
            playlistControls: NSSegmentedControl,
            statusField: NSTextField,
        ),
        libraryDataSource: Retained[LibraryDataSource],
        playlistDataSource: Retained[PlaylistDataSource],
        library: Library,
        player: Retained[Player],
    ),
    ClassMethods(
    ),
    InstanceMethods(
        ...IBActions(
            (#"performPlayControl:", (self, sender) => {
                switch(sender.selectedSegment()) {
                case PlayControlsBackTag:
                    self^.player.previousTrack();
                    break;
                case PlayControlsPlayTag: {
                        var selection = self^.playlistView.selectedRow();
                        if (selection < 0) selection = 0;
                        playTrackNumber(self, selection);
                        break;
                    }
                case PlayControlsForwardTag:
                    self^.player.nextTrack();
                    break;
                }
            }),
            (#"performDoubleClickPlaylist:", (self, sender) => {
            }),
            (#"performDoubleClickTrack:", (self, sender) => {
                var rowNumber = sender.clickedRow();
                if (rowNumber < 0)
                    return;
                playTrackNumber(self, rowNumber);
            }),
            (#"performVolumeUpdate:", (self, sender) => {
                var volume = sender.doubleValue();
                NSUserDefaults.standardUserDefaults().setDouble_forKey(volume, "Volume");
                self^.player.setVolume(Float(volume));
            }),
            (#"performSearch:", (self, sender) => {
                setStatusField(self, "search ", sender.stringValue());
            }),
            (#"performPlaylistControl:", (self, sender) => {
                switch(sender.selectedSegment()) {
                case PlaylistControlsAddTag:
                    setStatusField(self, "add");
                    break;
                case PlaylistControlsRandomTag:
                    setStatusField(self, "random");
                    break;
                case PlaylistControlsRepeatTag:
                    setStatusField(self, "repeat");
                    break;
                }
            }),
            (#"performSelectPlaylist:", (self, sender) => {
                var item = sender.itemAtRow(sender.selectedRow());
                if (itemIsFolder?(item))
                    self^.playlistDataSource.setLibraryView(
                        LibraryView(PlaylistFolderView(Int(item["id"])))
                    );
                else if (itemIsPlaylist?(item))
                    self^.playlistDataSource.setLibraryView(
                        LibraryView(PlaylistView(Int(item["id"])))
                    );
                else
                    self^.playlistDataSource.setLibraryView(
                        LibraryView(SortedView())
                    );
                self^.playlistView.reloadData();
            }),
            (#"performSelectTrack:", (self, sender) => {
            }),
            (#"performImportItunesLibrary:", (self, sender) => {
                performImportItunesLibrary(self, findItunesLibrary());
            }),
            (#"performOpenLibraryWindow:", (self, sender) => {
                self^.mainWindow.makeKeyAndOrderFront(self);
            }),
        ),
        (#"awakeFromNib", self => {
            self^.library <-- Library();
            self^.libraryDataSource
                = Retained(LibraryDataSource.alloc().initWithLibrary(&self^.library));
            self^.libraryView.setDataSource(self^.libraryDataSource);

            self^.libraryView.setDoubleAction(selectorHandle(#"performDoubleClickPlaylist:"));
            self^.playlistView.setDoubleAction(selectorHandle(#"performDoubleClickTrack:"));

            self^.playlistDataSource
                = Retained(PlaylistDataSource.alloc().initWithLibrary(&self^.library));
            self^.playlistView.setDataSource(self^.playlistDataSource);

            self^.player = Retained(Player.alloc().init());

            var defaults = NSUserDefaults.standardUserDefaults();
            defaults.registerDefaults(makeNSDictionary(
                "Volume", 1.0,
            ));

            var volume = defaults.doubleForKey(#"Volume");
            self^.volumeControl.setDoubleValue(volume);
            self^.player.setVolume(Float(volume));
        }),
        (#"library", self => &self^.library),
        ReaderInstanceMethod(#player, Player),
        DeallocInstanceMethod(),

        (#"_itunesSheetDidEnd:returnCode:contextInfo:", (self, sheet, returnCode, context) => {
            var importController = ItunesImportController(context);
            refreshPlaylistDataSource(weak(self^.playlistDataSource));
            refreshLibraryDataSource(weak(self^.libraryDataSource));
            self^.libraryView.reloadData();
            self^.playlistView.reloadData();
            sheet.orderOut(self);
            importController.release();
        }),
    ),
);
