import cocoa.*;
import cocoa.appkit.*;
import Vinyl.appdelegate.*;
import Vinyl.library.*;
import Vinyl.library.datasources.*;
import Vinyl.qtplayer.*;
import Vinyl.controllers.itunesimport.*;
import libc;

alias PlayControlsBackTag = 0;
alias PlayControlsPlayTag = 1;
alias PlayControlsForwardTag = 2;

alias PlaylistControlsAddTag = 0;
alias PlaylistControlsRandomTag = 1;
alias PlaylistControlsRepeatTag = 2;

overload selector(static #"performPlayControl:") = Void, NSSegmentedControl;
overload selector(static #"performVolumeUpdate:") = Void, Id;
overload selector(static #"performSearch:") = Void, Id;
overload selector(static #"performPlaylistControl:") = Void, NSSegmentedControl;
overload selector(static #"performAddPlaylist:") = Void, Id;
overload selector(static #"performToggleShuffle:") = Void, Id;
overload selector(static #"performToggleRepeat:") = Void, Id;
overload selector(static #"performImportItunesLibrary:") = Void, Id;
overload selector(static #"performDoubleClickPlaylist:") = Void, NSTableView;
overload selector(static #"performDoubleClickTrack:") = Void, NSTableView;
overload selector(static #"performImportItunesLibrary:") = Void, Id;
overload selector(static #"performOpenLibraryWindow:") = Void, Id;
overload selector(static #"player") = Player;
overload selector(static #"library") = Pointer[Library];
overload selector(static #"_itunesSheetDidEnd:returnCode:contextInfo:")
    = Void, NSWindow, NSInteger, RawPointer;
overload selector(static #"handlePlayerStateDidChangeNotification:")
    = Void, NSNotification;
overload selector(static #"handleSelectPlaylist:") = Void, NSNotification;
overload selector(static #"handleSelectTrack:") = Void, NSNotification;

setStatusField(self, ...contents) {
    self^.statusField.setStringValue(printString(...contents));
}

performImportItunesLibrary(self: MainController, itunesLibrary: NSString) {
    if (nil?(itunesLibrary)) {
        // XXX error reporting
        NSLog(NSString(#"itunes library not found"));
    } else {
        var importController = ItunesImportController.alloc().init();

        if (nil?(importController))
            // XXX
            NSLog(NSString(#"couldn't create controller"));
        else
            importController.importItunesLibrary_modalForWindow_modalDelegate_didEndSelector_contextInfo(
                itunesLibrary,
                self^.mainWindow,
                self,
                selectorHandle(#"_itunesSheetDidEnd:returnCode:contextInfo:"),
                RawPointer(importController)
            );
    }
}

playTrackNumber(self: MainController, trackNumber: NSInteger) {
    self^.player.playLibrary_view_trackNumber(
        &self^.library,
        self^.playlistDataSource.libraryView()^,
        SizeT(trackNumber)
    );
}

updateShuffleControl(self: MainController, shuffle: Bool) {
    self^.playlistControls.setLabel_forSegment(
        if (shuffle) "X" else "x",
        NSInteger(PlaylistControlsRandomTag)
    );
}

updateRepeatControl(self: MainController, repeatMode: RepeatMode) {
    var label = StringConstant();
    switch (repeatMode) {
    case NoRepeat:
        label = "r";
        break;
    case RepeatAll:
        label = "R";
        break;
    case RepeatOne:
        label = "1";
        break;
    }
    self^.playlistControls.setLabel_forSegment(
        label,
        NSInteger(PlaylistControlsRepeatTag)
    );
}

updatePlayControls(self: MainController) {
    var playControls = self^.playControls;
    match(self^.player.playerState()^,
        StoppedState,  stopped => {
            self^.playButtonMode = PlayButton;
            playControls.setLabel_forSegment(
                #">",
                NSInteger(PlayControlsPlayTag)
            );
            playControls.setEnabled_forSegment(
                false,
                NSInteger(PlayControlsBackTag)
            );
            playControls.setEnabled_forSegment(
                false,
                NSInteger(PlayControlsForwardTag)
            );
        },
        PlaylistState, playlistState => {
            playControls.setEnabled_forSegment(
                true,
                NSInteger(PlayControlsBackTag)
            );
            playControls.setEnabled_forSegment(
                true,
                NSInteger(PlayControlsForwardTag)
            );

            switch (playlistState.mode) {
            case Playing:
                if (playlistState.libraryView == self^.playlistDataSource.libraryView()^) {
                    self^.playButtonMode = PauseButton;
                    playControls.setLabel_forSegment(
                        #"||",
                        NSInteger(PlayControlsPlayTag)
                    );
                } else {
                    self^.playButtonMode = StopButton;
                    playControls.setLabel_forSegment(
                        #"X",
                        NSInteger(PlayControlsPlayTag)
                    );
                }
                break;
            case Paused:
                if (playlistState.libraryView == self^.playlistDataSource.libraryView()^)
                    self^.playButtonMode = ResumeButton;
                else
                    self^.playButtonMode = PlayButton;

                playControls.setLabel_forSegment(
                    #">",
                    NSInteger(PlayControlsPlayTag)
                );
                break;
            }
        }
    );
}

enum PlayButtonMode { PlayButton, ResumeButton, StopButton, PauseButton }

playButton(self: MainController) {
    switch (self^.playButtonMode) {
    case PlayButton: {
            var selection = self^.playlistView.selectedRow();
            if (selection < 0)
                selection = 0;
            playTrackNumber(self, selection);
        }
        break;
    case ResumeButton:
        self^.player.resume();
        break;
    case PauseButton:
        self^.player.pause();
        break;
    case StopButton:
        self^.player.stop();
        break;
    }
}

record MainController = newClass(#VinylMainController, NSObject,
    InstanceVars(
        ...IBOutlets(
            mainWindow: NSWindow,
            appDelegate: AppDelegate,
            // content
            libraryView: NSOutlineView,
            playlistView: NSTableView,
            // toolbar
            playControls: NSSegmentedControl,
            volumeControl: NSControl,
            playInfoView: NSView,
            searchField: NSTextField,
            // status bar controls
            playlistControls: NSSegmentedControl,
            statusField: NSTextField,
        ),
        libraryDataSource: Retained[LibraryDataSource],
        playlistDataSource: Retained[PlaylistDataSource],
        library: Library,
        player: Retained[Player],
        playButtonMode: PlayButtonMode,
    ),
    ClassMethods(
    ),
    InstanceMethods(
        DeallocInstanceMethod(),

        ...IBActions(
            (#"performPlayControl:", (self, sender) => {
                switch (sender.selectedSegment()) {
                case PlayControlsBackTag:
                    self^.player.previousTrack();
                    break;
                case PlayControlsPlayTag:
                    playButton(self);
                    break;
                case PlayControlsForwardTag:
                    self^.player.nextTrack();
                    break;
                }
            }),
            (#"performDoubleClickPlaylist:", (self, sender) => {
            }),
            (#"performDoubleClickTrack:", (self, sender) => {
                var rowNumber = sender.clickedRow();
                if (rowNumber < 0)
                    return;
                playTrackNumber(self, rowNumber);
            }),
            (#"performVolumeUpdate:", (self, sender) => {
                var volume = sender.doubleValue();
                NSUserDefaults.standardUserDefaults().setDouble_forKey(volume, "Volume");
                self^.player.setVolume(Float(volume));
            }),
            (#"performSearch:", (self, sender) => {
                self^.playlistDataSource.setSearchString(sender.stringValue());
                self^.playlistView.reloadData();
            }),
            (#"performPlaylistControl:", (self, sender) => {
                switch (sender.selectedSegment()) {
                case PlaylistControlsAddTag:
                    self.performAddPlaylist(sender);
                    break;
                case PlaylistControlsRandomTag:
                    self.performToggleShuffle(sender);
                    break;
                case PlaylistControlsRepeatTag:
                    self.performToggleRepeat(sender);
                    break;
                }
            }),
            (#"performAddPlaylist:", (self, sender) => {
            }),
            (#"performToggleShuffle:", (self, sender) => {
                var shuffle = not self^.player.shuffle();
                updateShuffleControl(self, shuffle);
                NSUserDefaults.standardUserDefaults().setBool_forKey(shuffle, #"Shuffle");
                self^.player.setShuffle(shuffle);
            }),
            (#"performToggleRepeat:", (self, sender) => {
                var repeat = self^.player.repeatMode();
                switch (repeat) {
                case NoRepeat:
                    repeat = RepeatAll;
                    break;
                case RepeatAll:
                    repeat = RepeatOne;
                    break;
                case RepeatOne:
                    repeat = NoRepeat;
                    break;
                }
                updateRepeatControl(self, repeat);
                NSUserDefaults.standardUserDefaults().setInteger_forKey(
                    NSInteger(repeat),
                    #"Repeat"
                );
                self^.player.setRepeatMode(repeat);
            }),
            (#"performImportItunesLibrary:", (self, sender) => {
                performImportItunesLibrary(self, findItunesLibrary());
            }),
            (#"performOpenLibraryWindow:", (self, sender) => {
                self^.mainWindow.makeKeyAndOrderFront(self);
            }),
        ),

        (#"awakeFromNib", self => {
            libc.srandomdev();

            self^.library <-- Library();
            updateLibraryFTS(self^.library);

            self^.libraryDataSource
                = Retained(LibraryDataSource.alloc().initWithLibrary(&self^.library));
            self^.libraryView.setDataSource(self^.libraryDataSource);

            self^.libraryView.setTarget(self);
            self^.libraryView.setDoubleAction(selectorHandle(#"performDoubleClickPlaylist:"));
            self^.playlistView.setTarget(self);
            self^.playlistView.setDoubleAction(selectorHandle(#"performDoubleClickTrack:"));

            self^.playlistDataSource
                = Retained(PlaylistDataSource.alloc().initWithLibrary(&self^.library));
            self^.playlistView.setDataSource(self^.playlistDataSource);

            self^.player = Retained(Player.alloc().init());

            var defaults = NSUserDefaults.standardUserDefaults();
            defaults.registerDefaults(makeNSDictionary(
                #"Volume", 1.0,
                #"Shuffle", false,
                #"Repeat", Int(NoRepeat),
            ));

            var volume = defaults.doubleForKey(#"Volume");
            var shuffle = defaults.boolForKey(#"Shuffle");
            var repeat = RepeatMode(defaults.integerForKey(#"Repeat"));

            self^.volumeControl.setDoubleValue(volume);
            updateShuffleControl(self, shuffle);
            updateRepeatControl(self, repeat);

            self^.player.setVolume(Float(volume));
            self^.player.setShuffle(shuffle);
            self^.player.setRepeatMode(repeat);

            var notiCenter = NSNotificationCenter.defaultCenter();
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handlePlayerStateDidChangeNotification:"),
                PlayerStateDidChangeNotification,
                self^.player
            );
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handleSelectPlaylist:"),
                NSOutlineViewSelectionDidChangeNotification,
                self^.libraryView
            );
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handleSelectTrack:"),
                NSTableViewSelectionDidChangeNotification,
                self^.playlistView
            );
        }),

        (#"library", self => &self^.library),
        ReaderInstanceMethod(#player, Player),

        (#"_itunesSheetDidEnd:returnCode:contextInfo:", (self, sheet, returnCode, context) => {
            var importController = ItunesImportController(context);
            refreshPlaylistDataSource(weak(self^.playlistDataSource));
            refreshLibraryDataSource(weak(self^.libraryDataSource));
            self^.libraryView.reloadData();
            self^.playlistView.reloadData();
            sheet.orderOut(self);
            importController.release();
        }),

        (#"handlePlayerStateDidChangeNotification:", (self, notification) => {
            updatePlayControls(self);
        }),
        (#"handleSelectPlaylist:", (self, notification) => {
            var libView = self^.libraryView;
            var item = libView.itemAtRow(libView.selectedRow());
            if (itemIsFolder?(item))
                self^.playlistDataSource.setLibraryView(
                    LibraryView(PlaylistFolderView(Int(item["id"])))
                );
            else if (itemIsPlaylist?(item))
                self^.playlistDataSource.setLibraryView(
                    LibraryView(PlaylistView(Int(item["id"])))
                );
            else
                self^.playlistDataSource.setLibraryView(
                    LibraryView(SortedView())
                );
            self^.playlistView.reloadData();
            updatePlayControls(self);
        }),
        (#"handleSelectTrack:", (self, notification) => {
        }),
    ),
);
