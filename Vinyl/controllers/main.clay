import cocoa.*;
import cocoa.appkit.*;
import Vinyl.appdelegate.*;
import Vinyl.library.*;
import Vinyl.qtplayer.*;

alias PlayControlsBackTag = 0;
alias PlayControlsPlayTag = 1;
alias PlayControlsForwardTag = 2;

alias PlaylistControlsAddTag = 0;
alias PlaylistControlsRandomTag = 1;
alias PlaylistControlsRepeatTag = 2;

overload selector(static #"performPlayControl:") = Void, NSSegmentedControl;
overload selector(static #"performVolumeUpdate:") = Void, Id;
overload selector(static #"performSearch:") = Void, Id;
overload selector(static #"performPlaylistControl:") = Void, NSSegmentedControl;
overload selector(static #"performSelectPlaylist:") = Void, NSOutlineView;

setStatusField(self, ...contents) {
    self^.statusField.setStringValue(printString(...contents));
}

record MainController = newClass(#VinylMainController, NSObject,
    InstanceVars(
        ...IBOutlets(
            mainWindow: NSWindow,
            appDelegate: AppDelegate,
            // content
            libraryView: NSOutlineView,
            playlistView: NSTableView,
            // toolbar
            playControls: NSSegmentedControl,
            volumeControl: NSControl,
            playInfoView: NSView,
            searchField: NSTextField,
            // status bar controls
            playlistControls: NSSegmentedControl,
            statusField: NSTextField,
        ),
        libraryDataSource: Retained[LibraryDataSource],
        playlistDataSource: Retained[PlaylistDataSource],
        library: Library,
        player: Retained[Player],
    ),
    ClassMethods(
    ),
    InstanceMethods(
        ...IBActions(
            (#"performPlayControl:", (self, sender) => {
                switch(sender.selectedSegment()) {
                case PlayControlsBackTag:
                    setStatusField(self, "back");
                    break;
                case PlayControlsPlayTag: {
                        var selection = self^.playlistView.selectedRow();
                        if (selection < 0) selection = 0;
                        println("selected row ", selection);

                        var tracks = NSMutableArray.array();
                        
                        for (x in slicedFrom(self^.playlistDataSource.tracks()^, selection)) {
                            tracks.addObject(x.filename);
                        }
                        self^.player.playFilesNamed(tracks);

                        setStatusField(self, "play");
                        break;
                    }
                case PlayControlsForwardTag:
                    setStatusField(self, "forward");
                    break;
                }
            }),
            (#"performVolumeUpdate:", (self, sender) => {
                setStatusField(self, "volume ", sender.intValue());
            }),
            (#"performSearch:", (self, sender) => {
                setStatusField(self, "search ", sender.stringValue());
            }),
            (#"performPlaylistControl:", (self, sender) => {
                switch(sender.selectedSegment()) {
                case PlaylistControlsAddTag:
                    setStatusField(self, "add");
                    break;
                case PlaylistControlsRandomTag:
                    setStatusField(self, "random");
                    break;
                case PlaylistControlsRepeatTag:
                    setStatusField(self, "repeat");
                    break;
                }
            }),
            (#"performSelectPlaylist:", (self, sender) => {
                var item = sender.itemAtRow(sender.selectedRow());
                if (itemIsFolder?(item))
                    self^.playlistDataSource.setLibraryFilter(
                        LibraryFilter(PlaylistFolderFilter(Int(item["id"])))
                    );
                else if (itemIsPlaylist?(item))
                    self^.playlistDataSource.setLibraryFilter(
                        LibraryFilter(PlaylistFilter(Int(item["id"])))
                    );
                else
                    self^.playlistDataSource.setLibraryFilter(LibraryFilter(NoFilter()));
                self^.playlistView.reloadData();
            }),
        ),
        (#"awakeFromNib", self => {
            self^.library <-- Library();
            self^.libraryDataSource
                = Retained(LibraryDataSource.alloc().initWithLibrary(&self^.library));
            self^.libraryView.setDataSource(self^.libraryDataSource);

            self^.playlistDataSource
                = Retained(PlaylistDataSource.alloc().initWithLibrary(&self^.library));
            self^.playlistView.setDataSource(self^.playlistDataSource);

            self^.player = Retained(Player.alloc().init());
        }),
        DeallocInstanceMethod(),
    ),
);
