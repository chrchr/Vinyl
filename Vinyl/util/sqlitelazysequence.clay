import sqlite.*;

private record SqliteLazySequenceState[T] (
    rows: Vector[T],
    si: SqliteStatementIterator, // NB: order dependency
    stmt: SqliteStatement,
    siHasNext?: Bool, 
);

[T] overload SqliteLazySequenceState[T](rows, si, rvalue stmt)
    = SqliteLazySequenceState[T](rows, si, move(stmt), hasNext?(si));

[T] sqliteLazySequence(static T, rvalue stmt: SqliteStatement, size: SizeT)
    = mapped(
        SqliteLazySequenceState[T](Vector[T](), iterator(stmt), move(stmt)),
        range(size)
    );

SqliteLazySequence(T) = Type(sqliteLazySequence(T, typeToRValue(SqliteStatement), SizeT(0)));

[T, I | Integer?(I)]
overload call(seq: SqliteLazySequenceState[T], n: I) {
    if (n >= size(seq.rows))
        forceRows(seq, n);
    return seq.rows[n];
}

[T, I | Integer?(I)]
private forceRows(seq: SqliteLazySequenceState[T], upto: I) {
    while(seq.siHasNext?) {
        push(seq.rows, rowRecord(next(seq.si), T));
        seq.siHasNext? = hasNext?(seq.si);
        if (upto < size(seq.rows))
            break;
    }
}

forceAllRows(lazy) {
    if (size(lazy.mapper.rows) < size(lazy))
        forceRows(lazy.mapper, size(lazy) - 1);
    destroy(lazy.mapper.stmt);
    resetUnsafe(lazy.mapper.stmt);
}
