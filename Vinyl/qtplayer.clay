import cocoa.*;
import cocoa.qtkit.*;
import sqlite.*;
import Vinyl.library.*;
import Vinyl.library.datasources.*;

record StoppedState ();

enum PlaylistMode { Playing, Paused }

record PlaylistState (
    mode: PlaylistMode,
    track: SizeT,
    libraryView: LibraryView,
    movie: Retained[QTMovie],
    tracks: Vector[PlaylistTrack],
);

[I | Integer?(I)]
overload PlaylistState(mode: PlaylistMode, track: I, library: Pointer[Library], view: LibraryView)
{
    var returned = PlaylistState(
        mode,
        SizeT(track),
        view,
        Retained[QTMovie](),
        Vector[PlaylistTrack]()
    );

    for (row in filteredPlaylistStatement(library^.db, *view))
        push(returned.tracks, rowRecord(row, PlaylistTrack));

    return move(returned);
}

variant PlayerState = StoppedState | PlaylistState;

overload selector(static #"state") = PlayerState;
overload selector(static #"setState:") = Void, PlayerState;
overload selector(static #"handleMovieDidEndNotification:") = Void, NSNotification;
overload selector(static #"playLibrary:view:trackNumber:") = Void, Pointer[Library], LibraryView, SizeT;
overload selector(static #"resume") = Void;
overload selector(static #"pause") = Void;
overload selector(static #"stop") = Void;
overload selector(static #"previousTrack") = Void;
overload selector(static #"nextTrack") = Void;

record Player = newClass(NSObject,
    InstanceVars(
        state: PlayerState,
    ),
    ClassMethods(
    ),
    InstanceMethods(
        (#"init", self => initObjectWith(self, #"init", self => {
            self^.state <-- PlayerState(StoppedState());

            NSNotificationCenter.defaultCenter().addObserver_selector_name_object(
                self,
                selectorHandle(#"handleMovieDidEndNotification:"),
                QTMovieDidEndNotification,
                nil()
            );
            return self;
        })),
        DeallocInstanceMethod(),
        ...PropertyInstanceMethods(#state, PlayerState),

        (#"handleMovieDidEndNotification:", (self, notification) => {
            match(self^.state,
                StoppedState,  stopped => { },
                PlaylistState, playlistState => {
                    if (is?(playlistState.movie, notification.object())) {
                        self.nextTrack();
                    }
                }
            );
        }),

        (#"playLibrary:view:trackNumber:", (self, library, libraryView, trackNumber) => {
            self.stop();
            self^.state = PlayerState(PlaylistState(Paused, trackNumber, library, libraryView));
            self.resume();
        }),

        (#"resume", self => {
            match(self^.state,
                StoppedState,  stopped => { },
                PlaylistState, playlistState => {
                    if (nil?(playlistState.movie))
                        playlistState.movie = movieForFileName(playlistState.tracks[playlistState.track].filename);
                    playlistState.movie.autoplay();
                    playlistState.mode = Playing;
                }
            );
        }),

        (#"stop", self => {
            match(self^.state,
                StoppedState,  stopped => { },
                PlaylistState, playlistState => {
                    playlistState.movie.stop();
                    self^.state = PlayerState(StoppedState());
                }
            );
        }),

        (#"previousTrack", self => {
            match(self^.state,
                StoppedState,  stopped => { },
                PlaylistState, playlistState => {
                    // XXX start from beginning/previous track behavior
                    playlistState.movie.stop();
                    playlistState.movie = nil();
                    if (playlistState.track > 0)
                        playlistState.track -= 1;
                    self.resume();
                }
            );
        }),

        (#"nextTrack", self => {
            match(self^.state,
                StoppedState,  stopped => { },
                PlaylistState, playlistState => {
                    playlistState.movie.stop();
                    playlistState.movie = nil();
                    if (playlistState.track < size(playlistState.tracks) - 1) {
                        playlistState.track += 1;
                        self.resume();
                    } else {
                        self^.state = PlayerState(StoppedState());
                    }
                }
            );
        }),
    ),
);

record QTMovieError (error: NSError);
instance Exception = QTMovieError;

movieForFileName(name) {
    var error = nil(NSError);
    
    var movie = QTMovie.movieWithAttributes_error(makeNSDictionary(
        QTMovieOpenForPlaybackAttribute, true,
        QTMovieFileNameAttribute, name,
    ), &error);

    if (nil?(movie))
        throw QTMovieError(error);

    return movie;
}
